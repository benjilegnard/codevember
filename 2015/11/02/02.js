"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function resize(){canvas.width=window.innerWidth,canvas.height=window.innerHeight,center={x:window.innerWidth/2,y:window.innerHeight/2}}function initialize(){resize();for(var t=0;CIRCLE_AMOUNT>t;t++)circles.push(new Circle({radius:CIRCLE_RADIUS,center:{x:center.x+Math.cos(TAU/CIRCLE_AMOUNT*t)*CIRCLE_RADIUS,y:center.y+Math.sin(TAU/CIRCLE_AMOUNT*t)*CIRCLE_RADIUS},offset:360*-((t+1)/CIRCLE_AMOUNT)*PRECISION,clockwise:t%2==0}));polyline=new PolyLine(circles),animate()}function animate(t){context.fillStyle="rgba(0,0,0,"+13.5/PRECISION+")",context.fillRect(0,0,canvas.width,canvas.height),polyline.draw(),polyline.tick(),requestAnimationFrame(animate)}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),CIRCLE_AMOUNT=4,CIRCLE_RADIUS=160,PRECISION=180,TAU=2*Math.PI,ANGLE=TAU/PRECISION,canvas=document.getElementById("canvas"),context=canvas.getContext("2d"),center={x:window.innerWidth/2,y:window.innerHeight/2},Circle=function(){function t(e){_classCallCheck(this,t),this.radius=e.radius,this.center=e.center,this.points=[],this.currentPoint=e.offest||0,this.currentAngle=e.offest*ANGLE||0,this.clockwise=e.clockwise}return _createClass(t,[{key:"nextPoint",value:function(){return this.clockwise?this.currentAngle+=ANGLE:this.currentAngle-=ANGLE,{x:this.center.x+Math.cos(this.currentAngle)*CIRCLE_RADIUS,y:this.center.y+Math.sin(this.currentAngle)*CIRCLE_RADIUS}}}]),t}(),PolyLine=function(){function t(e){_classCallCheck(this,t),this.circles=e,this.points=[],this.tick()}return _createClass(t,[{key:"tick",value:function(){var t=this,e=0;this.circles.forEach(function(n){t.points[e]=n.nextPoint(),e++})}},{key:"draw",value:function(){context.beginPath(),context.strokeStyle="white",context.moveTo(this.points[0].x,this.points[0].y);for(var t=1;t<this.points.length;t+=1)context.lineTo(this.points[t].x,this.points[t].y);context.lineTo(this.points[0].x,this.points[0].y),context.stroke()}}]),t}(),circles=[],polyline=null,frameCount=0;window.addEventListener("resize",resize),document.addEventListener("DOMContentLoaded",initialize);