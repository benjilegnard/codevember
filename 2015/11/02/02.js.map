{"version":3,"sources":["02.js"],"names":[],"mappings":"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","file":"2015/11/02/02.js","sourcesContent":["//play with these values :\r\nconst\r\n//number of abstract circles on the scene. (minimum 2)\r\n    CIRCLE_AMOUNT = 4,\r\n//radius of each circle\r\n    CIRCLE_RADIUS = 160,\r\n//number of points on a circle (avoid more than 360)\r\n    PRECISION = 180,\r\n//don't touch below, those are real constants :)\r\n    TAU = Math.PI*2,\r\n    ANGLE = TAU/PRECISION;\r\n\r\nvar canvas = document.getElementById('canvas'),\r\n    context = canvas.getContext('2d'),\r\n    center = {\r\n        x: window.innerWidth / 2,\r\n        y: window.innerHeight / 2\r\n    };\r\n/**\r\n * a Circle abstraction,\r\n */\r\nclass Circle {\r\n    /**\r\n     * takes an object as argument\r\n     * ex :\r\n     *  {\r\n        radius:100,\r\n        center:{x:100,y:200},\r\n        clockwise:true\r\n      }\r\n     */\r\n    constructor(options) {\r\n        this.radius = options.radius;\r\n        this.center = options.center;\r\n        this.points = [];\r\n        this.currentPoint = options.offest || 0;\r\n        this.currentAngle = options.offest * ANGLE || 0;\r\n        //clockwise or not, defines the orientation in wich to fetch the next point\r\n        this.clockwise = options.clockwise;\r\n    }\r\n    /**\r\n     * calculate the next point coordinates, and inc/decrement angle.\r\n     */\r\n    nextPoint() {\r\n        if(this.clockwise){\r\n            this.currentAngle+=ANGLE;\r\n        }else{\r\n            this.currentAngle-=ANGLE;\r\n        }\r\n        return {\r\n            x:this.center.x + Math.cos(this.currentAngle)*CIRCLE_RADIUS,\r\n            y:this.center.y + Math.sin(this.currentAngle)*CIRCLE_RADIUS\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Draws a line between a point of each circle on the scene.\r\n */\r\nclass PolyLine {\r\n    constructor(circles) {\r\n        this.circles = circles;\r\n        this.points = [];\r\n        this.tick();\r\n    }\r\n    /**\r\n     * gets the next point of each circle to draw.\r\n     */\r\n    tick(){\r\n        let i = 0;\r\n        this.circles.forEach(\r\n            (circle)=>{\r\n            this.points[i] = circle.nextPoint();\r\n        i++;\r\n    }\r\n);\r\n}\r\n/**\r\n * connect each circle with a white line.\r\n */\r\ndraw(){\r\n    context.beginPath();\r\n    context.strokeStyle='white';\r\n    context.moveTo(this.points[0].x, this.points[0].y);\r\n    for(let i = 1; i< this.points.length; i+=1){\r\n        context.lineTo(this.points[i].x,this.points[i].y);\r\n    }\r\n    //end\r\n    context.lineTo(this.points[0].x,this.points[0].y);\r\n    context.stroke();\r\n}\r\n\r\n}\r\n\r\nfunction resize() {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    center = {\r\n        x: window.innerWidth / 2,\r\n        y: window.innerHeight / 2\r\n    };\r\n}\r\nvar circles = [],\r\n    polyline = null,\r\n    frameCount = 0;\r\n\r\nfunction initialize() {\r\n    resize();\r\n    for(let i = 0; i < CIRCLE_AMOUNT;i++){\r\n        circles.push(\r\n            new Circle({\r\n                radius:CIRCLE_RADIUS,\r\n                center:{\r\n                    x:center.x + Math.cos(TAU/CIRCLE_AMOUNT*i)*CIRCLE_RADIUS,\r\n                    y:center.y + Math.sin(TAU/CIRCLE_AMOUNT*i)*CIRCLE_RADIUS\r\n                },\r\n                offset:-((i+1)/CIRCLE_AMOUNT)*360*PRECISION,\r\n                clockwise:(i%2==0)\r\n            })\r\n        );\r\n    }\r\n    polyline = new PolyLine(circles);\r\n    animate();\r\n}\r\n\r\nfunction animate(timestamp) {\r\n    //simulates fading of old lines.\r\n    context.fillStyle='rgba(0,0,0,'+13.5/PRECISION+')';\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n    //Draw\r\n    //circles.forEach((c)=>{c.draw()});\r\n    polyline.draw();\r\n    //if(frameCount%5 == 0){\r\n    //context.clearRect(0, 0, canvas.width, canvas.height);\r\n    polyline.tick();\r\n    //}\r\n    //frameCount++;\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\nwindow.addEventListener('resize', resize);\r\ndocument.addEventListener('DOMContentLoaded', initialize);"],"sourceRoot":"/source/"}