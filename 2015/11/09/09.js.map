{"version":3,"sources":["09.js"],"names":[],"mappings":"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","file":"2015/11/09/09.js","sourcesContent":["const\r\n    TAU = Math.PI * 2,\r\n    COLORS = [0x2C4549, 0x78BDB0, 0x81CFB6, 0x8BE1BC, 0xC6F7E2],\r\n    POINTS_QUANTITY = 64,\r\n    LINE_WIDTH = .25,\r\n    MIN_DRAW_DISTANCE = 50,\r\n    MAX_DRAW_DISTANCE = 200,\r\n    ROTATION_SPEED = TAU / 360,\r\n    SPEED = 1,\r\n\r\n    canvas = document.getElementById('c'),\r\n    context = canvas.getContext('2d'),\r\n    points = [];\r\n\r\nlet\r\n    resizer = () => {\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n    },\r\n    animator = () => {\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        context.fillStyle = '#' + COLORS[0].toString(16);\r\n        context.fillRect(0, 0, canvas.width, canvas.height);\r\n        points.forEach((point)=> {\r\n            movePoint(point);\r\n            drawPoint(point);\r\n            collisionDetector(point);\r\n            //creates a table of points that are near the current one.\r\n            points.filter((obj) => {\r\n                    var distance = Math.sqrt(Math.pow((obj.x - point.x), 2) + Math.pow((obj.y - point.y), 2));\r\n                    return distance < MAX_DRAW_DISTANCE && distance > MIN_DRAW_DISTANCE;\r\n                })\r\n                .forEach((dest) => {\r\n                    drawLine(point, dest);\r\n                    drawLine(dest, point);\r\n                });\r\n        });\r\n\r\n        requestAnimationFrame(animator);\r\n    },\r\n    drawPoint = (point) => {\r\n        context.fillStyle = '#' + COLORS[4].toString(16);\r\n        context.fillRect(point.x - 1, point.y - 1, 3, 3);\r\n        /*\r\n        context.fillStyle = 'white';\r\n        context.fillRect(point.o.x - 1, point.o.y - 1, 3, 3);*/\r\n        /*\r\n        context.beginPath();\r\n        context.moveTo(point.x,point.y);\r\n        context.lineTo(point.o.x,point.o.y);\r\n        context.closePath();\r\n        context.stroke();\r\n        */\r\n    },\r\n//draw zig zags\r\n    drawLine = function (origine, destination) {\r\n        let angle = angleFromPoints(origine, destination),\r\n            currentPoint = origine,\r\n            distance = distanceFromPoints(origine, destination),\r\n            step = distance / (Math.random() * 10 + 10);\r\n\r\n        context.beginPath();\r\n        context.moveTo(origine.x, origine.y);\r\n        let interPoint;\r\n\r\n        for (let i = 1; i * step < distance; i++) {\r\n            currentPoint = {\r\n                x: origine.x + Math.cos(angle) * i * step,\r\n                y: origine.y + Math.sin(angle) * i * step\r\n            };\r\n            interPoint = pointPerpendicularTo(currentPoint, angle, Math.random() * 10, (i % 2 == 0));\r\n            context.lineTo(interPoint.x, interPoint.y);\r\n        }\r\n        context.lineTo(destination.x, destination.y);\r\n        context.lineWidth = LINE_WIDTH;\r\n        //choose color based on distance\r\n        let distanceRatio = distance / (MAX_DRAW_DISTANCE - MIN_DRAW_DISTANCE);\r\n        if (distanceRatio < 0.3) {\r\n            context.strokeStyle = '#' + COLORS[2].toString(16);\r\n        } else if (distanceRatio > 0.6) {\r\n            context.strokeStyle = '#' + COLORS[3].toString(16);\r\n        } else {\r\n            context.strokeStyle = '#' + COLORS[1].toString(16);\r\n        }\r\n        context.stroke();\r\n        context.closePath();\r\n    },\r\n    pointPerpendicularTo = (origin, angle, distance, leftOrRight) => {\r\n        return {\r\n            x: origin.x + Math.cos(angle + (leftOrRight ? TAU / 4 : -TAU / 4 )) * distance,\r\n            y: origin.y + Math.sin(angle + (leftOrRight ? TAU / 4 : -TAU / 4 )) * distance\r\n        };\r\n    },\r\n    angleFromPoints = (origine, destination) => {\r\n        return Math.atan2(destination.y - origine.y, destination.x - origine.x);\r\n    },\r\n    distanceFromPoints = (origine, destination) => {\r\n        return Math.sqrt((origine.x - destination.x) * (origine.x - destination.x) + (origine.y - destination.y) * (origine.y - destination.y));\r\n    },\r\n    movePoint = (point) => {\r\n        //rotate drawing point\r\n        point.a += ROTATION_SPEED;\r\n        //move origin\r\n        point.o.x += Math.cos(point.d) * SPEED;\r\n        point.o.y += Math.sin(point.d) * SPEED;\r\n        //move drawing point\r\n        point.x = point.o.x + Math.cos(point.a) * point.r;\r\n        point.y = point.o.y + Math.sin(point.a) * point.r;\r\n\r\n    },\r\n    //if a point gets lost outside the canvas, put it back on the other side.\r\n    collisionDetector = (point) => {\r\n        if (point.o.x < 0 || point.o.x > window.innerWidth) {\r\n            point.d = TAU / 2 - point.d;\r\n        }\r\n        if (point.o.y < 0 || point.o.y > window.innerHeight) {\r\n            point.d = -point.d;\r\n        }\r\n    },\r\n    createPoint = () => {\r\n\r\n        return {\r\n            //random position\r\n            o: {\r\n                x: Math.floor(Math.random() * window.innerWidth),\r\n                y: Math.floor(Math.random() * window.innerHeight)\r\n            },\r\n            /*x: 0,\r\n            y: 0,*/\r\n            //random starting radian angle\r\n            a: Math.random() * TAU,\r\n            //direction of the origin\r\n            d: Math.random() * TAU,\r\n            r: Math.random() * 200,\r\n            v: ROTATION_SPEED\r\n        };\r\n    },\r\n    initPoints = () => {\r\n\r\n        for (let i = 0; i < POINTS_QUANTITY; i++) {\r\n            points.push(\r\n                createPoint()\r\n            );\r\n        }\r\n    },\r\n    clickHandler = (event) => {\r\n        const point = createPoint();\r\n        point.o.x = event.clientX;\r\n        point.o.y = event.clientY;\r\n        points.push(point);\r\n    },\r\n    initializer = () => {\r\n        resizer();\r\n        initPoints();\r\n        requestAnimationFrame(animator);\r\n    };\r\n\r\nwindow.addEventListener('resize', resizer, false);\r\ncanvas.addEventListener('click', clickHandler);\r\ndocument.addEventListener('DOMContentLoaded', initializer);"],"sourceRoot":"/source/"}