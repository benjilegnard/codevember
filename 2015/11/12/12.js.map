{"version":3,"sources":["12.js"],"names":[],"mappings":"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","file":"2015/11/12/12.js","sourcesContent":["// @see https://en.wikipedia.org/wiki/Seven-segment_display\r\n/** abcdefg :\r\n -   a\r\n - f   b\r\n -   g\r\n - e   c\r\n -   d\r\n */\r\n\r\n/**\r\n * Array of equivalence  between digit/ binary bars to light\r\n * example : index of the tab : binary abcdefg to display in hexadecimal when called with .toString(2)\r\n * (1111110) will light bars a b c d e f but not g.\r\n *\r\n * @see https://en.wikipedia.org/wiki/Seven-segment_display#Displaying_letters\r\n * @type {number[]}\r\n */\r\nconst DIGIT_TO_HEX = [\r\n    0x7E,\r\n    0x30,\r\n    0x6D,\r\n    0x79,\r\n    0x33,\r\n    0x5B,\r\n    0x5F,\r\n    0x70,\r\n    0x7F,\r\n    0x7B\r\n];\r\n/**\r\n * Returns a binary representation of the seven segment bars to light.\r\n *\r\n * @param i the digit to display (index of the array)\r\n * @returns {string} 7 bits in a string.\r\n */\r\nconst barToLightFromInt = (i)=> {\r\n        let s = DIGIT_TO_HEX[i].toString(2);\r\n        while (s.length < 7) s = \"0\" + s;\r\n        return s;\r\n    },\r\n    /**\r\n     * Adds a leading 0 to an integer (for instance, takes 2, returns '02')\r\n     * @param x\r\n     * @returns {string} a string value of the integer.\r\n     */\r\n    trimDigit = (x)=> {\r\n        return ( ( '' + x ).length < 2) ? '0' + x : '' + x;\r\n    },\r\n    /**\r\n     * Remove class off of a DOM Element.\r\n     *\r\n     * @param element\r\n     * @param test\r\n     */\r\n    toggleOnOff = (element, test)=> {\r\n        if (test === '1') {\r\n            element.classList.remove('off');\r\n            element.classList.add('on');\r\n        } else {\r\n            element.classList.remove('on');\r\n            element.classList.add('off');\r\n        }\r\n    },\r\n    applyToDOMElement = (elem, digit) => {\r\n        const digits = barToLightFromInt(digit);\r\n        for (let i = 0; i < digits.length; i++) {\r\n            toggleOnOff(elem.children[i], digits[i]);\r\n        }\r\n    },\r\n    refreshDate = ()=> {\r\n        const date = new Date(),\r\n            hour = trimDigit(date.getHours()),\r\n            min = trimDigit(date.getMinutes()),\r\n            sec = trimDigit(date.getSeconds());\r\n\r\n        for (let i = 0; i < hour.length; i++) {\r\n            applyToDOMElement(document.getElementById('h-' + (i + 1)), hour[i]);\r\n        }\r\n        for (let i = 0; i < min.length; i++) {\r\n            applyToDOMElement(document.getElementById('m-' + (i + 1)), min[i]);\r\n        }\r\n        for (let i = 0; i < sec.length; i++) {\r\n            applyToDOMElement(document.getElementById('s-' + (i + 1)), sec[i]);\r\n        }\r\n        requestAnimationFrame(refreshDate);\r\n        //window.setTimeout(()=>refreshDate, 1000);\r\n    },\r\n    drawBackground = ()=> {\r\n        const canvas = document.getElementById('canvas'),\r\n            context = canvas.getContext('2d');\r\n        for (let y = 0; y < canvas.height; y++) {\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const color = Math.floor(Math.random() * 10),\r\n                    width = Math.floor(Math.random() * 10) + 1;\r\n                context.fillStyle = `rgb(${color},${color},${color})`;\r\n                context.fillRect(x, y, width, 1);\r\n                x += (width - 1);\r\n            }\r\n        }\r\n        //requestAnimationFrame(drawBackground);\r\n    },\r\n    resize = () => {\r\n        const canvas = document.getElementById('canvas');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        drawBackground();\r\n    };\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', ()=> {\r\n    resize();\r\n    //refresh every seconds.\r\n    refreshDate();\r\n});\r\nwindow.addEventListener('resize', resize);"],"sourceRoot":"/source/"}